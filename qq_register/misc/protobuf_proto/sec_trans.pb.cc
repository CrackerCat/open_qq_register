// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sec_trans.proto

#include "sec_trans.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace sec_trans {
class SecTransInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecTransInfo>
      _instance;
} _SecTransInfo_default_instance_;
}  // namespace sec_trans
namespace protobuf_sec_5ftrans_2eproto {
void InitDefaultsSecTransInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sec_trans::_SecTransInfo_default_instance_;
    new (ptr) ::sec_trans::SecTransInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sec_trans::SecTransInfo::InitAsDefaultInstance();
}

void InitDefaultsSecTransInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSecTransInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sec_trans::SecTransInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sec_trans::SecTransInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sec_trans::SecTransInfo, str_phone_brand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sec_trans::SecTransInfo, str_model_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sec_trans::SecTransInfo, str_wifi_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sec_trans::SecTransInfo, str_bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sec_trans::SecTransInfo, str_os_language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sec_trans::SecTransInfo, uint32_qq_language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sec_trans::SecTransInfo, str_gps_location_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::sec_trans::SecTransInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sec_trans::_SecTransInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sec_trans.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017sec_trans.proto\022\tsec_trans\"\267\001\n\014SecTran"
      "sInfo\022\027\n\017str_phone_brand\030\001 \001(\014\022\026\n\016str_mo"
      "del_type\030\002 \001(\014\022\024\n\014str_wifi_mac\030\003 \001(\014\022\021\n\t"
      "str_bssid\030\004 \001(\014\022\027\n\017str_os_language\030\005 \001(\014"
      "\022\032\n\022uint32_qq_language\030\006 \001(\r\022\030\n\020str_gps_"
      "location\030\007 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sec_trans.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sec_5ftrans_2eproto
namespace sec_trans {

// ===================================================================

void SecTransInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecTransInfo::kStrPhoneBrandFieldNumber;
const int SecTransInfo::kStrModelTypeFieldNumber;
const int SecTransInfo::kStrWifiMacFieldNumber;
const int SecTransInfo::kStrBssidFieldNumber;
const int SecTransInfo::kStrOsLanguageFieldNumber;
const int SecTransInfo::kUint32QqLanguageFieldNumber;
const int SecTransInfo::kStrGpsLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecTransInfo::SecTransInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sec_5ftrans_2eproto::InitDefaultsSecTransInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sec_trans.SecTransInfo)
}
SecTransInfo::SecTransInfo(const SecTransInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_phone_brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str_phone_brand()) {
    str_phone_brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_phone_brand_);
  }
  str_model_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str_model_type()) {
    str_model_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_model_type_);
  }
  str_wifi_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str_wifi_mac()) {
    str_wifi_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_wifi_mac_);
  }
  str_bssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str_bssid()) {
    str_bssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_bssid_);
  }
  str_os_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str_os_language()) {
    str_os_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_os_language_);
  }
  str_gps_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str_gps_location()) {
    str_gps_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_gps_location_);
  }
  uint32_qq_language_ = from.uint32_qq_language_;
  // @@protoc_insertion_point(copy_constructor:sec_trans.SecTransInfo)
}

void SecTransInfo::SharedCtor() {
  _cached_size_ = 0;
  str_phone_brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_model_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_wifi_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_bssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_os_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_gps_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uint32_qq_language_ = 0u;
}

SecTransInfo::~SecTransInfo() {
  // @@protoc_insertion_point(destructor:sec_trans.SecTransInfo)
  SharedDtor();
}

void SecTransInfo::SharedDtor() {
  str_phone_brand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_model_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_wifi_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_bssid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_os_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_gps_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecTransInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecTransInfo::descriptor() {
  ::protobuf_sec_5ftrans_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sec_5ftrans_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecTransInfo& SecTransInfo::default_instance() {
  ::protobuf_sec_5ftrans_2eproto::InitDefaultsSecTransInfo();
  return *internal_default_instance();
}

SecTransInfo* SecTransInfo::New(::google::protobuf::Arena* arena) const {
  SecTransInfo* n = new SecTransInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SecTransInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sec_trans.SecTransInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!str_phone_brand_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_phone_brand_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!str_model_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_model_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!str_wifi_mac_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_wifi_mac_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!str_bssid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_bssid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!str_os_language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_os_language_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!str_gps_location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_gps_location_.UnsafeRawStringPointer())->clear();
    }
  }
  uint32_qq_language_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecTransInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sec_trans.SecTransInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes str_phone_brand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_phone_brand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes str_model_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_model_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes str_wifi_mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_wifi_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes str_bssid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes str_os_language = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_os_language()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uint32_qq_language = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_uint32_qq_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_qq_language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes str_gps_location = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_gps_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sec_trans.SecTransInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sec_trans.SecTransInfo)
  return false;
#undef DO_
}

void SecTransInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sec_trans.SecTransInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes str_phone_brand = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->str_phone_brand(), output);
  }

  // optional bytes str_model_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->str_model_type(), output);
  }

  // optional bytes str_wifi_mac = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->str_wifi_mac(), output);
  }

  // optional bytes str_bssid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->str_bssid(), output);
  }

  // optional bytes str_os_language = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->str_os_language(), output);
  }

  // optional uint32 uint32_qq_language = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uint32_qq_language(), output);
  }

  // optional bytes str_gps_location = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->str_gps_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sec_trans.SecTransInfo)
}

::google::protobuf::uint8* SecTransInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sec_trans.SecTransInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes str_phone_brand = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->str_phone_brand(), target);
  }

  // optional bytes str_model_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->str_model_type(), target);
  }

  // optional bytes str_wifi_mac = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->str_wifi_mac(), target);
  }

  // optional bytes str_bssid = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->str_bssid(), target);
  }

  // optional bytes str_os_language = 5;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->str_os_language(), target);
  }

  // optional uint32 uint32_qq_language = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uint32_qq_language(), target);
  }

  // optional bytes str_gps_location = 7;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->str_gps_location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sec_trans.SecTransInfo)
  return target;
}

size_t SecTransInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sec_trans.SecTransInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes str_phone_brand = 1;
    if (has_str_phone_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_phone_brand());
    }

    // optional bytes str_model_type = 2;
    if (has_str_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_model_type());
    }

    // optional bytes str_wifi_mac = 3;
    if (has_str_wifi_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_wifi_mac());
    }

    // optional bytes str_bssid = 4;
    if (has_str_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_bssid());
    }

    // optional bytes str_os_language = 5;
    if (has_str_os_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_os_language());
    }

    // optional bytes str_gps_location = 7;
    if (has_str_gps_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_gps_location());
    }

    // optional uint32 uint32_qq_language = 6;
    if (has_uint32_qq_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_qq_language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecTransInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sec_trans.SecTransInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SecTransInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecTransInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sec_trans.SecTransInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sec_trans.SecTransInfo)
    MergeFrom(*source);
  }
}

void SecTransInfo::MergeFrom(const SecTransInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sec_trans.SecTransInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_str_phone_brand();
      str_phone_brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_phone_brand_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_str_model_type();
      str_model_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_model_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_str_wifi_mac();
      str_wifi_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_wifi_mac_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_str_bssid();
      str_bssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_bssid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_str_os_language();
      str_os_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_os_language_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_str_gps_location();
      str_gps_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_gps_location_);
    }
    if (cached_has_bits & 0x00000040u) {
      uint32_qq_language_ = from.uint32_qq_language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SecTransInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sec_trans.SecTransInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecTransInfo::CopyFrom(const SecTransInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sec_trans.SecTransInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecTransInfo::IsInitialized() const {
  return true;
}

void SecTransInfo::Swap(SecTransInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecTransInfo::InternalSwap(SecTransInfo* other) {
  using std::swap;
  str_phone_brand_.Swap(&other->str_phone_brand_);
  str_model_type_.Swap(&other->str_model_type_);
  str_wifi_mac_.Swap(&other->str_wifi_mac_);
  str_bssid_.Swap(&other->str_bssid_);
  str_os_language_.Swap(&other->str_os_language_);
  str_gps_location_.Swap(&other->str_gps_location_);
  swap(uint32_qq_language_, other->uint32_qq_language_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SecTransInfo::GetMetadata() const {
  protobuf_sec_5ftrans_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sec_5ftrans_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sec_trans

// @@protoc_insertion_point(global_scope)
