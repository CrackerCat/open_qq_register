// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sec_trans.proto

#ifndef PROTOBUF_sec_5ftrans_2eproto__INCLUDED
#define PROTOBUF_sec_5ftrans_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_sec_5ftrans_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSecTransInfoImpl();
void InitDefaultsSecTransInfo();
inline void InitDefaults() {
  InitDefaultsSecTransInfo();
}
}  // namespace protobuf_sec_5ftrans_2eproto
namespace sec_trans {
class SecTransInfo;
class SecTransInfoDefaultTypeInternal;
extern SecTransInfoDefaultTypeInternal _SecTransInfo_default_instance_;
}  // namespace sec_trans
namespace sec_trans {

// ===================================================================

class SecTransInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sec_trans.SecTransInfo) */ {
 public:
  SecTransInfo();
  virtual ~SecTransInfo();

  SecTransInfo(const SecTransInfo& from);

  inline SecTransInfo& operator=(const SecTransInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecTransInfo(SecTransInfo&& from) noexcept
    : SecTransInfo() {
    *this = ::std::move(from);
  }

  inline SecTransInfo& operator=(SecTransInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecTransInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecTransInfo* internal_default_instance() {
    return reinterpret_cast<const SecTransInfo*>(
               &_SecTransInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SecTransInfo* other);
  friend void swap(SecTransInfo& a, SecTransInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecTransInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SecTransInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SecTransInfo& from);
  void MergeFrom(const SecTransInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SecTransInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes str_phone_brand = 1;
  bool has_str_phone_brand() const;
  void clear_str_phone_brand();
  static const int kStrPhoneBrandFieldNumber = 1;
  const ::std::string& str_phone_brand() const;
  void set_str_phone_brand(const ::std::string& value);
  #if LANG_CXX11
  void set_str_phone_brand(::std::string&& value);
  #endif
  void set_str_phone_brand(const char* value);
  void set_str_phone_brand(const void* value, size_t size);
  ::std::string* mutable_str_phone_brand();
  ::std::string* release_str_phone_brand();
  void set_allocated_str_phone_brand(::std::string* str_phone_brand);

  // optional bytes str_model_type = 2;
  bool has_str_model_type() const;
  void clear_str_model_type();
  static const int kStrModelTypeFieldNumber = 2;
  const ::std::string& str_model_type() const;
  void set_str_model_type(const ::std::string& value);
  #if LANG_CXX11
  void set_str_model_type(::std::string&& value);
  #endif
  void set_str_model_type(const char* value);
  void set_str_model_type(const void* value, size_t size);
  ::std::string* mutable_str_model_type();
  ::std::string* release_str_model_type();
  void set_allocated_str_model_type(::std::string* str_model_type);

  // optional bytes str_wifi_mac = 3;
  bool has_str_wifi_mac() const;
  void clear_str_wifi_mac();
  static const int kStrWifiMacFieldNumber = 3;
  const ::std::string& str_wifi_mac() const;
  void set_str_wifi_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_str_wifi_mac(::std::string&& value);
  #endif
  void set_str_wifi_mac(const char* value);
  void set_str_wifi_mac(const void* value, size_t size);
  ::std::string* mutable_str_wifi_mac();
  ::std::string* release_str_wifi_mac();
  void set_allocated_str_wifi_mac(::std::string* str_wifi_mac);

  // optional bytes str_bssid = 4;
  bool has_str_bssid() const;
  void clear_str_bssid();
  static const int kStrBssidFieldNumber = 4;
  const ::std::string& str_bssid() const;
  void set_str_bssid(const ::std::string& value);
  #if LANG_CXX11
  void set_str_bssid(::std::string&& value);
  #endif
  void set_str_bssid(const char* value);
  void set_str_bssid(const void* value, size_t size);
  ::std::string* mutable_str_bssid();
  ::std::string* release_str_bssid();
  void set_allocated_str_bssid(::std::string* str_bssid);

  // optional bytes str_os_language = 5;
  bool has_str_os_language() const;
  void clear_str_os_language();
  static const int kStrOsLanguageFieldNumber = 5;
  const ::std::string& str_os_language() const;
  void set_str_os_language(const ::std::string& value);
  #if LANG_CXX11
  void set_str_os_language(::std::string&& value);
  #endif
  void set_str_os_language(const char* value);
  void set_str_os_language(const void* value, size_t size);
  ::std::string* mutable_str_os_language();
  ::std::string* release_str_os_language();
  void set_allocated_str_os_language(::std::string* str_os_language);

  // optional bytes str_gps_location = 7;
  bool has_str_gps_location() const;
  void clear_str_gps_location();
  static const int kStrGpsLocationFieldNumber = 7;
  const ::std::string& str_gps_location() const;
  void set_str_gps_location(const ::std::string& value);
  #if LANG_CXX11
  void set_str_gps_location(::std::string&& value);
  #endif
  void set_str_gps_location(const char* value);
  void set_str_gps_location(const void* value, size_t size);
  ::std::string* mutable_str_gps_location();
  ::std::string* release_str_gps_location();
  void set_allocated_str_gps_location(::std::string* str_gps_location);

  // optional uint32 uint32_qq_language = 6;
  bool has_uint32_qq_language() const;
  void clear_uint32_qq_language();
  static const int kUint32QqLanguageFieldNumber = 6;
  ::google::protobuf::uint32 uint32_qq_language() const;
  void set_uint32_qq_language(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sec_trans.SecTransInfo)
 private:
  void set_has_str_phone_brand();
  void clear_has_str_phone_brand();
  void set_has_str_model_type();
  void clear_has_str_model_type();
  void set_has_str_wifi_mac();
  void clear_has_str_wifi_mac();
  void set_has_str_bssid();
  void clear_has_str_bssid();
  void set_has_str_os_language();
  void clear_has_str_os_language();
  void set_has_uint32_qq_language();
  void clear_has_uint32_qq_language();
  void set_has_str_gps_location();
  void clear_has_str_gps_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str_phone_brand_;
  ::google::protobuf::internal::ArenaStringPtr str_model_type_;
  ::google::protobuf::internal::ArenaStringPtr str_wifi_mac_;
  ::google::protobuf::internal::ArenaStringPtr str_bssid_;
  ::google::protobuf::internal::ArenaStringPtr str_os_language_;
  ::google::protobuf::internal::ArenaStringPtr str_gps_location_;
  ::google::protobuf::uint32 uint32_qq_language_;
  friend struct ::protobuf_sec_5ftrans_2eproto::TableStruct;
  friend void ::protobuf_sec_5ftrans_2eproto::InitDefaultsSecTransInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SecTransInfo

// optional bytes str_phone_brand = 1;
inline bool SecTransInfo::has_str_phone_brand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecTransInfo::set_has_str_phone_brand() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecTransInfo::clear_has_str_phone_brand() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecTransInfo::clear_str_phone_brand() {
  str_phone_brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_phone_brand();
}
inline const ::std::string& SecTransInfo::str_phone_brand() const {
  // @@protoc_insertion_point(field_get:sec_trans.SecTransInfo.str_phone_brand)
  return str_phone_brand_.GetNoArena();
}
inline void SecTransInfo::set_str_phone_brand(const ::std::string& value) {
  set_has_str_phone_brand();
  str_phone_brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sec_trans.SecTransInfo.str_phone_brand)
}
#if LANG_CXX11
inline void SecTransInfo::set_str_phone_brand(::std::string&& value) {
  set_has_str_phone_brand();
  str_phone_brand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sec_trans.SecTransInfo.str_phone_brand)
}
#endif
inline void SecTransInfo::set_str_phone_brand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str_phone_brand();
  str_phone_brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sec_trans.SecTransInfo.str_phone_brand)
}
inline void SecTransInfo::set_str_phone_brand(const void* value, size_t size) {
  set_has_str_phone_brand();
  str_phone_brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sec_trans.SecTransInfo.str_phone_brand)
}
inline ::std::string* SecTransInfo::mutable_str_phone_brand() {
  set_has_str_phone_brand();
  // @@protoc_insertion_point(field_mutable:sec_trans.SecTransInfo.str_phone_brand)
  return str_phone_brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecTransInfo::release_str_phone_brand() {
  // @@protoc_insertion_point(field_release:sec_trans.SecTransInfo.str_phone_brand)
  clear_has_str_phone_brand();
  return str_phone_brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecTransInfo::set_allocated_str_phone_brand(::std::string* str_phone_brand) {
  if (str_phone_brand != NULL) {
    set_has_str_phone_brand();
  } else {
    clear_has_str_phone_brand();
  }
  str_phone_brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_phone_brand);
  // @@protoc_insertion_point(field_set_allocated:sec_trans.SecTransInfo.str_phone_brand)
}

// optional bytes str_model_type = 2;
inline bool SecTransInfo::has_str_model_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecTransInfo::set_has_str_model_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecTransInfo::clear_has_str_model_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecTransInfo::clear_str_model_type() {
  str_model_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_model_type();
}
inline const ::std::string& SecTransInfo::str_model_type() const {
  // @@protoc_insertion_point(field_get:sec_trans.SecTransInfo.str_model_type)
  return str_model_type_.GetNoArena();
}
inline void SecTransInfo::set_str_model_type(const ::std::string& value) {
  set_has_str_model_type();
  str_model_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sec_trans.SecTransInfo.str_model_type)
}
#if LANG_CXX11
inline void SecTransInfo::set_str_model_type(::std::string&& value) {
  set_has_str_model_type();
  str_model_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sec_trans.SecTransInfo.str_model_type)
}
#endif
inline void SecTransInfo::set_str_model_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str_model_type();
  str_model_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sec_trans.SecTransInfo.str_model_type)
}
inline void SecTransInfo::set_str_model_type(const void* value, size_t size) {
  set_has_str_model_type();
  str_model_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sec_trans.SecTransInfo.str_model_type)
}
inline ::std::string* SecTransInfo::mutable_str_model_type() {
  set_has_str_model_type();
  // @@protoc_insertion_point(field_mutable:sec_trans.SecTransInfo.str_model_type)
  return str_model_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecTransInfo::release_str_model_type() {
  // @@protoc_insertion_point(field_release:sec_trans.SecTransInfo.str_model_type)
  clear_has_str_model_type();
  return str_model_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecTransInfo::set_allocated_str_model_type(::std::string* str_model_type) {
  if (str_model_type != NULL) {
    set_has_str_model_type();
  } else {
    clear_has_str_model_type();
  }
  str_model_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_model_type);
  // @@protoc_insertion_point(field_set_allocated:sec_trans.SecTransInfo.str_model_type)
}

// optional bytes str_wifi_mac = 3;
inline bool SecTransInfo::has_str_wifi_mac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecTransInfo::set_has_str_wifi_mac() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecTransInfo::clear_has_str_wifi_mac() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecTransInfo::clear_str_wifi_mac() {
  str_wifi_mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_wifi_mac();
}
inline const ::std::string& SecTransInfo::str_wifi_mac() const {
  // @@protoc_insertion_point(field_get:sec_trans.SecTransInfo.str_wifi_mac)
  return str_wifi_mac_.GetNoArena();
}
inline void SecTransInfo::set_str_wifi_mac(const ::std::string& value) {
  set_has_str_wifi_mac();
  str_wifi_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sec_trans.SecTransInfo.str_wifi_mac)
}
#if LANG_CXX11
inline void SecTransInfo::set_str_wifi_mac(::std::string&& value) {
  set_has_str_wifi_mac();
  str_wifi_mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sec_trans.SecTransInfo.str_wifi_mac)
}
#endif
inline void SecTransInfo::set_str_wifi_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str_wifi_mac();
  str_wifi_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sec_trans.SecTransInfo.str_wifi_mac)
}
inline void SecTransInfo::set_str_wifi_mac(const void* value, size_t size) {
  set_has_str_wifi_mac();
  str_wifi_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sec_trans.SecTransInfo.str_wifi_mac)
}
inline ::std::string* SecTransInfo::mutable_str_wifi_mac() {
  set_has_str_wifi_mac();
  // @@protoc_insertion_point(field_mutable:sec_trans.SecTransInfo.str_wifi_mac)
  return str_wifi_mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecTransInfo::release_str_wifi_mac() {
  // @@protoc_insertion_point(field_release:sec_trans.SecTransInfo.str_wifi_mac)
  clear_has_str_wifi_mac();
  return str_wifi_mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecTransInfo::set_allocated_str_wifi_mac(::std::string* str_wifi_mac) {
  if (str_wifi_mac != NULL) {
    set_has_str_wifi_mac();
  } else {
    clear_has_str_wifi_mac();
  }
  str_wifi_mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_wifi_mac);
  // @@protoc_insertion_point(field_set_allocated:sec_trans.SecTransInfo.str_wifi_mac)
}

// optional bytes str_bssid = 4;
inline bool SecTransInfo::has_str_bssid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SecTransInfo::set_has_str_bssid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SecTransInfo::clear_has_str_bssid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SecTransInfo::clear_str_bssid() {
  str_bssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_bssid();
}
inline const ::std::string& SecTransInfo::str_bssid() const {
  // @@protoc_insertion_point(field_get:sec_trans.SecTransInfo.str_bssid)
  return str_bssid_.GetNoArena();
}
inline void SecTransInfo::set_str_bssid(const ::std::string& value) {
  set_has_str_bssid();
  str_bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sec_trans.SecTransInfo.str_bssid)
}
#if LANG_CXX11
inline void SecTransInfo::set_str_bssid(::std::string&& value) {
  set_has_str_bssid();
  str_bssid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sec_trans.SecTransInfo.str_bssid)
}
#endif
inline void SecTransInfo::set_str_bssid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str_bssid();
  str_bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sec_trans.SecTransInfo.str_bssid)
}
inline void SecTransInfo::set_str_bssid(const void* value, size_t size) {
  set_has_str_bssid();
  str_bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sec_trans.SecTransInfo.str_bssid)
}
inline ::std::string* SecTransInfo::mutable_str_bssid() {
  set_has_str_bssid();
  // @@protoc_insertion_point(field_mutable:sec_trans.SecTransInfo.str_bssid)
  return str_bssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecTransInfo::release_str_bssid() {
  // @@protoc_insertion_point(field_release:sec_trans.SecTransInfo.str_bssid)
  clear_has_str_bssid();
  return str_bssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecTransInfo::set_allocated_str_bssid(::std::string* str_bssid) {
  if (str_bssid != NULL) {
    set_has_str_bssid();
  } else {
    clear_has_str_bssid();
  }
  str_bssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_bssid);
  // @@protoc_insertion_point(field_set_allocated:sec_trans.SecTransInfo.str_bssid)
}

// optional bytes str_os_language = 5;
inline bool SecTransInfo::has_str_os_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SecTransInfo::set_has_str_os_language() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SecTransInfo::clear_has_str_os_language() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SecTransInfo::clear_str_os_language() {
  str_os_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_os_language();
}
inline const ::std::string& SecTransInfo::str_os_language() const {
  // @@protoc_insertion_point(field_get:sec_trans.SecTransInfo.str_os_language)
  return str_os_language_.GetNoArena();
}
inline void SecTransInfo::set_str_os_language(const ::std::string& value) {
  set_has_str_os_language();
  str_os_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sec_trans.SecTransInfo.str_os_language)
}
#if LANG_CXX11
inline void SecTransInfo::set_str_os_language(::std::string&& value) {
  set_has_str_os_language();
  str_os_language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sec_trans.SecTransInfo.str_os_language)
}
#endif
inline void SecTransInfo::set_str_os_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str_os_language();
  str_os_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sec_trans.SecTransInfo.str_os_language)
}
inline void SecTransInfo::set_str_os_language(const void* value, size_t size) {
  set_has_str_os_language();
  str_os_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sec_trans.SecTransInfo.str_os_language)
}
inline ::std::string* SecTransInfo::mutable_str_os_language() {
  set_has_str_os_language();
  // @@protoc_insertion_point(field_mutable:sec_trans.SecTransInfo.str_os_language)
  return str_os_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecTransInfo::release_str_os_language() {
  // @@protoc_insertion_point(field_release:sec_trans.SecTransInfo.str_os_language)
  clear_has_str_os_language();
  return str_os_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecTransInfo::set_allocated_str_os_language(::std::string* str_os_language) {
  if (str_os_language != NULL) {
    set_has_str_os_language();
  } else {
    clear_has_str_os_language();
  }
  str_os_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_os_language);
  // @@protoc_insertion_point(field_set_allocated:sec_trans.SecTransInfo.str_os_language)
}

// optional uint32 uint32_qq_language = 6;
inline bool SecTransInfo::has_uint32_qq_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SecTransInfo::set_has_uint32_qq_language() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SecTransInfo::clear_has_uint32_qq_language() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SecTransInfo::clear_uint32_qq_language() {
  uint32_qq_language_ = 0u;
  clear_has_uint32_qq_language();
}
inline ::google::protobuf::uint32 SecTransInfo::uint32_qq_language() const {
  // @@protoc_insertion_point(field_get:sec_trans.SecTransInfo.uint32_qq_language)
  return uint32_qq_language_;
}
inline void SecTransInfo::set_uint32_qq_language(::google::protobuf::uint32 value) {
  set_has_uint32_qq_language();
  uint32_qq_language_ = value;
  // @@protoc_insertion_point(field_set:sec_trans.SecTransInfo.uint32_qq_language)
}

// optional bytes str_gps_location = 7;
inline bool SecTransInfo::has_str_gps_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SecTransInfo::set_has_str_gps_location() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SecTransInfo::clear_has_str_gps_location() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SecTransInfo::clear_str_gps_location() {
  str_gps_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_gps_location();
}
inline const ::std::string& SecTransInfo::str_gps_location() const {
  // @@protoc_insertion_point(field_get:sec_trans.SecTransInfo.str_gps_location)
  return str_gps_location_.GetNoArena();
}
inline void SecTransInfo::set_str_gps_location(const ::std::string& value) {
  set_has_str_gps_location();
  str_gps_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sec_trans.SecTransInfo.str_gps_location)
}
#if LANG_CXX11
inline void SecTransInfo::set_str_gps_location(::std::string&& value) {
  set_has_str_gps_location();
  str_gps_location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sec_trans.SecTransInfo.str_gps_location)
}
#endif
inline void SecTransInfo::set_str_gps_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str_gps_location();
  str_gps_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sec_trans.SecTransInfo.str_gps_location)
}
inline void SecTransInfo::set_str_gps_location(const void* value, size_t size) {
  set_has_str_gps_location();
  str_gps_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sec_trans.SecTransInfo.str_gps_location)
}
inline ::std::string* SecTransInfo::mutable_str_gps_location() {
  set_has_str_gps_location();
  // @@protoc_insertion_point(field_mutable:sec_trans.SecTransInfo.str_gps_location)
  return str_gps_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecTransInfo::release_str_gps_location() {
  // @@protoc_insertion_point(field_release:sec_trans.SecTransInfo.str_gps_location)
  clear_has_str_gps_location();
  return str_gps_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecTransInfo::set_allocated_str_gps_location(::std::string* str_gps_location) {
  if (str_gps_location != NULL) {
    set_has_str_gps_location();
  } else {
    clear_has_str_gps_location();
  }
  str_gps_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_gps_location);
  // @@protoc_insertion_point(field_set_allocated:sec_trans.SecTransInfo.str_gps_location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sec_trans

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sec_5ftrans_2eproto__INCLUDED
