// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceReport.proto

#ifndef PROTOBUF_DeviceReport_2eproto__INCLUDED
#define PROTOBUF_DeviceReport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_DeviceReport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDeviceReportImpl();
void InitDefaultsDeviceReport();
inline void InitDefaults() {
  InitDefaultsDeviceReport();
}
}  // namespace protobuf_DeviceReport_2eproto
class DeviceReport;
class DeviceReportDefaultTypeInternal;
extern DeviceReportDefaultTypeInternal _DeviceReport_default_instance_;

// ===================================================================

class DeviceReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceReport) */ {
 public:
  DeviceReport();
  virtual ~DeviceReport();

  DeviceReport(const DeviceReport& from);

  inline DeviceReport& operator=(const DeviceReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceReport(DeviceReport&& from) noexcept
    : DeviceReport() {
    *this = ::std::move(from);
  }

  inline DeviceReport& operator=(DeviceReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceReport* internal_default_instance() {
    return reinterpret_cast<const DeviceReport*>(
               &_DeviceReport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DeviceReport* other);
  friend void swap(DeviceReport& a, DeviceReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceReport* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceReport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceReport& from);
  void MergeFrom(const DeviceReport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes bytes_bootloader = 1;
  bool has_bytes_bootloader() const;
  void clear_bytes_bootloader();
  static const int kBytesBootloaderFieldNumber = 1;
  const ::std::string& bytes_bootloader() const;
  void set_bytes_bootloader(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_bootloader(::std::string&& value);
  #endif
  void set_bytes_bootloader(const char* value);
  void set_bytes_bootloader(const void* value, size_t size);
  ::std::string* mutable_bytes_bootloader();
  ::std::string* release_bytes_bootloader();
  void set_allocated_bytes_bootloader(::std::string* bytes_bootloader);

  // optional bytes bytes_version = 2;
  bool has_bytes_version() const;
  void clear_bytes_version();
  static const int kBytesVersionFieldNumber = 2;
  const ::std::string& bytes_version() const;
  void set_bytes_version(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_version(::std::string&& value);
  #endif
  void set_bytes_version(const char* value);
  void set_bytes_version(const void* value, size_t size);
  ::std::string* mutable_bytes_version();
  ::std::string* release_bytes_version();
  void set_allocated_bytes_version(::std::string* bytes_version);

  // optional bytes bytes_codename = 3;
  bool has_bytes_codename() const;
  void clear_bytes_codename();
  static const int kBytesCodenameFieldNumber = 3;
  const ::std::string& bytes_codename() const;
  void set_bytes_codename(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_codename(::std::string&& value);
  #endif
  void set_bytes_codename(const char* value);
  void set_bytes_codename(const void* value, size_t size);
  ::std::string* mutable_bytes_codename();
  ::std::string* release_bytes_codename();
  void set_allocated_bytes_codename(::std::string* bytes_codename);

  // optional bytes bytes_incremental = 4;
  bool has_bytes_incremental() const;
  void clear_bytes_incremental();
  static const int kBytesIncrementalFieldNumber = 4;
  const ::std::string& bytes_incremental() const;
  void set_bytes_incremental(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_incremental(::std::string&& value);
  #endif
  void set_bytes_incremental(const char* value);
  void set_bytes_incremental(const void* value, size_t size);
  ::std::string* mutable_bytes_incremental();
  ::std::string* release_bytes_incremental();
  void set_allocated_bytes_incremental(::std::string* bytes_incremental);

  // optional bytes bytes_fingerprint = 5;
  bool has_bytes_fingerprint() const;
  void clear_bytes_fingerprint();
  static const int kBytesFingerprintFieldNumber = 5;
  const ::std::string& bytes_fingerprint() const;
  void set_bytes_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_fingerprint(::std::string&& value);
  #endif
  void set_bytes_fingerprint(const char* value);
  void set_bytes_fingerprint(const void* value, size_t size);
  ::std::string* mutable_bytes_fingerprint();
  ::std::string* release_bytes_fingerprint();
  void set_allocated_bytes_fingerprint(::std::string* bytes_fingerprint);

  // optional bytes bytes_boot_id = 6;
  bool has_bytes_boot_id() const;
  void clear_bytes_boot_id();
  static const int kBytesBootIdFieldNumber = 6;
  const ::std::string& bytes_boot_id() const;
  void set_bytes_boot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_boot_id(::std::string&& value);
  #endif
  void set_bytes_boot_id(const char* value);
  void set_bytes_boot_id(const void* value, size_t size);
  ::std::string* mutable_bytes_boot_id();
  ::std::string* release_bytes_boot_id();
  void set_allocated_bytes_boot_id(::std::string* bytes_boot_id);

  // optional bytes bytes_android_id = 7;
  bool has_bytes_android_id() const;
  void clear_bytes_android_id();
  static const int kBytesAndroidIdFieldNumber = 7;
  const ::std::string& bytes_android_id() const;
  void set_bytes_android_id(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_android_id(::std::string&& value);
  #endif
  void set_bytes_android_id(const char* value);
  void set_bytes_android_id(const void* value, size_t size);
  ::std::string* mutable_bytes_android_id();
  ::std::string* release_bytes_android_id();
  void set_allocated_bytes_android_id(::std::string* bytes_android_id);

  // optional bytes bytes_baseband = 8;
  bool has_bytes_baseband() const;
  void clear_bytes_baseband();
  static const int kBytesBasebandFieldNumber = 8;
  const ::std::string& bytes_baseband() const;
  void set_bytes_baseband(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_baseband(::std::string&& value);
  #endif
  void set_bytes_baseband(const char* value);
  void set_bytes_baseband(const void* value, size_t size);
  ::std::string* mutable_bytes_baseband();
  ::std::string* release_bytes_baseband();
  void set_allocated_bytes_baseband(::std::string* bytes_baseband);

  // optional bytes bytes_inner_ver = 9;
  bool has_bytes_inner_ver() const;
  void clear_bytes_inner_ver();
  static const int kBytesInnerVerFieldNumber = 9;
  const ::std::string& bytes_inner_ver() const;
  void set_bytes_inner_ver(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_inner_ver(::std::string&& value);
  #endif
  void set_bytes_inner_ver(const char* value);
  void set_bytes_inner_ver(const void* value, size_t size);
  ::std::string* mutable_bytes_inner_ver();
  ::std::string* release_bytes_inner_ver();
  void set_allocated_bytes_inner_ver(::std::string* bytes_inner_ver);

  // @@protoc_insertion_point(class_scope:DeviceReport)
 private:
  void set_has_bytes_bootloader();
  void clear_has_bytes_bootloader();
  void set_has_bytes_version();
  void clear_has_bytes_version();
  void set_has_bytes_codename();
  void clear_has_bytes_codename();
  void set_has_bytes_incremental();
  void clear_has_bytes_incremental();
  void set_has_bytes_fingerprint();
  void clear_has_bytes_fingerprint();
  void set_has_bytes_boot_id();
  void clear_has_bytes_boot_id();
  void set_has_bytes_android_id();
  void clear_has_bytes_android_id();
  void set_has_bytes_baseband();
  void clear_has_bytes_baseband();
  void set_has_bytes_inner_ver();
  void clear_has_bytes_inner_ver();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bytes_bootloader_;
  ::google::protobuf::internal::ArenaStringPtr bytes_version_;
  ::google::protobuf::internal::ArenaStringPtr bytes_codename_;
  ::google::protobuf::internal::ArenaStringPtr bytes_incremental_;
  ::google::protobuf::internal::ArenaStringPtr bytes_fingerprint_;
  ::google::protobuf::internal::ArenaStringPtr bytes_boot_id_;
  ::google::protobuf::internal::ArenaStringPtr bytes_android_id_;
  ::google::protobuf::internal::ArenaStringPtr bytes_baseband_;
  ::google::protobuf::internal::ArenaStringPtr bytes_inner_ver_;
  friend struct ::protobuf_DeviceReport_2eproto::TableStruct;
  friend void ::protobuf_DeviceReport_2eproto::InitDefaultsDeviceReportImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceReport

// optional bytes bytes_bootloader = 1;
inline bool DeviceReport::has_bytes_bootloader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceReport::set_has_bytes_bootloader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceReport::clear_has_bytes_bootloader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceReport::clear_bytes_bootloader() {
  bytes_bootloader_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_bootloader();
}
inline const ::std::string& DeviceReport::bytes_bootloader() const {
  // @@protoc_insertion_point(field_get:DeviceReport.bytes_bootloader)
  return bytes_bootloader_.GetNoArena();
}
inline void DeviceReport::set_bytes_bootloader(const ::std::string& value) {
  set_has_bytes_bootloader();
  bytes_bootloader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceReport.bytes_bootloader)
}
#if LANG_CXX11
inline void DeviceReport::set_bytes_bootloader(::std::string&& value) {
  set_has_bytes_bootloader();
  bytes_bootloader_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceReport.bytes_bootloader)
}
#endif
inline void DeviceReport::set_bytes_bootloader(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_bootloader();
  bytes_bootloader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceReport.bytes_bootloader)
}
inline void DeviceReport::set_bytes_bootloader(const void* value, size_t size) {
  set_has_bytes_bootloader();
  bytes_bootloader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceReport.bytes_bootloader)
}
inline ::std::string* DeviceReport::mutable_bytes_bootloader() {
  set_has_bytes_bootloader();
  // @@protoc_insertion_point(field_mutable:DeviceReport.bytes_bootloader)
  return bytes_bootloader_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceReport::release_bytes_bootloader() {
  // @@protoc_insertion_point(field_release:DeviceReport.bytes_bootloader)
  clear_has_bytes_bootloader();
  return bytes_bootloader_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceReport::set_allocated_bytes_bootloader(::std::string* bytes_bootloader) {
  if (bytes_bootloader != NULL) {
    set_has_bytes_bootloader();
  } else {
    clear_has_bytes_bootloader();
  }
  bytes_bootloader_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_bootloader);
  // @@protoc_insertion_point(field_set_allocated:DeviceReport.bytes_bootloader)
}

// optional bytes bytes_version = 2;
inline bool DeviceReport::has_bytes_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceReport::set_has_bytes_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceReport::clear_has_bytes_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceReport::clear_bytes_version() {
  bytes_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_version();
}
inline const ::std::string& DeviceReport::bytes_version() const {
  // @@protoc_insertion_point(field_get:DeviceReport.bytes_version)
  return bytes_version_.GetNoArena();
}
inline void DeviceReport::set_bytes_version(const ::std::string& value) {
  set_has_bytes_version();
  bytes_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceReport.bytes_version)
}
#if LANG_CXX11
inline void DeviceReport::set_bytes_version(::std::string&& value) {
  set_has_bytes_version();
  bytes_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceReport.bytes_version)
}
#endif
inline void DeviceReport::set_bytes_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_version();
  bytes_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceReport.bytes_version)
}
inline void DeviceReport::set_bytes_version(const void* value, size_t size) {
  set_has_bytes_version();
  bytes_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceReport.bytes_version)
}
inline ::std::string* DeviceReport::mutable_bytes_version() {
  set_has_bytes_version();
  // @@protoc_insertion_point(field_mutable:DeviceReport.bytes_version)
  return bytes_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceReport::release_bytes_version() {
  // @@protoc_insertion_point(field_release:DeviceReport.bytes_version)
  clear_has_bytes_version();
  return bytes_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceReport::set_allocated_bytes_version(::std::string* bytes_version) {
  if (bytes_version != NULL) {
    set_has_bytes_version();
  } else {
    clear_has_bytes_version();
  }
  bytes_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_version);
  // @@protoc_insertion_point(field_set_allocated:DeviceReport.bytes_version)
}

// optional bytes bytes_codename = 3;
inline bool DeviceReport::has_bytes_codename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceReport::set_has_bytes_codename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceReport::clear_has_bytes_codename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceReport::clear_bytes_codename() {
  bytes_codename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_codename();
}
inline const ::std::string& DeviceReport::bytes_codename() const {
  // @@protoc_insertion_point(field_get:DeviceReport.bytes_codename)
  return bytes_codename_.GetNoArena();
}
inline void DeviceReport::set_bytes_codename(const ::std::string& value) {
  set_has_bytes_codename();
  bytes_codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceReport.bytes_codename)
}
#if LANG_CXX11
inline void DeviceReport::set_bytes_codename(::std::string&& value) {
  set_has_bytes_codename();
  bytes_codename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceReport.bytes_codename)
}
#endif
inline void DeviceReport::set_bytes_codename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_codename();
  bytes_codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceReport.bytes_codename)
}
inline void DeviceReport::set_bytes_codename(const void* value, size_t size) {
  set_has_bytes_codename();
  bytes_codename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceReport.bytes_codename)
}
inline ::std::string* DeviceReport::mutable_bytes_codename() {
  set_has_bytes_codename();
  // @@protoc_insertion_point(field_mutable:DeviceReport.bytes_codename)
  return bytes_codename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceReport::release_bytes_codename() {
  // @@protoc_insertion_point(field_release:DeviceReport.bytes_codename)
  clear_has_bytes_codename();
  return bytes_codename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceReport::set_allocated_bytes_codename(::std::string* bytes_codename) {
  if (bytes_codename != NULL) {
    set_has_bytes_codename();
  } else {
    clear_has_bytes_codename();
  }
  bytes_codename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_codename);
  // @@protoc_insertion_point(field_set_allocated:DeviceReport.bytes_codename)
}

// optional bytes bytes_incremental = 4;
inline bool DeviceReport::has_bytes_incremental() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceReport::set_has_bytes_incremental() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceReport::clear_has_bytes_incremental() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceReport::clear_bytes_incremental() {
  bytes_incremental_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_incremental();
}
inline const ::std::string& DeviceReport::bytes_incremental() const {
  // @@protoc_insertion_point(field_get:DeviceReport.bytes_incremental)
  return bytes_incremental_.GetNoArena();
}
inline void DeviceReport::set_bytes_incremental(const ::std::string& value) {
  set_has_bytes_incremental();
  bytes_incremental_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceReport.bytes_incremental)
}
#if LANG_CXX11
inline void DeviceReport::set_bytes_incremental(::std::string&& value) {
  set_has_bytes_incremental();
  bytes_incremental_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceReport.bytes_incremental)
}
#endif
inline void DeviceReport::set_bytes_incremental(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_incremental();
  bytes_incremental_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceReport.bytes_incremental)
}
inline void DeviceReport::set_bytes_incremental(const void* value, size_t size) {
  set_has_bytes_incremental();
  bytes_incremental_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceReport.bytes_incremental)
}
inline ::std::string* DeviceReport::mutable_bytes_incremental() {
  set_has_bytes_incremental();
  // @@protoc_insertion_point(field_mutable:DeviceReport.bytes_incremental)
  return bytes_incremental_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceReport::release_bytes_incremental() {
  // @@protoc_insertion_point(field_release:DeviceReport.bytes_incremental)
  clear_has_bytes_incremental();
  return bytes_incremental_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceReport::set_allocated_bytes_incremental(::std::string* bytes_incremental) {
  if (bytes_incremental != NULL) {
    set_has_bytes_incremental();
  } else {
    clear_has_bytes_incremental();
  }
  bytes_incremental_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_incremental);
  // @@protoc_insertion_point(field_set_allocated:DeviceReport.bytes_incremental)
}

// optional bytes bytes_fingerprint = 5;
inline bool DeviceReport::has_bytes_fingerprint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceReport::set_has_bytes_fingerprint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceReport::clear_has_bytes_fingerprint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceReport::clear_bytes_fingerprint() {
  bytes_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_fingerprint();
}
inline const ::std::string& DeviceReport::bytes_fingerprint() const {
  // @@protoc_insertion_point(field_get:DeviceReport.bytes_fingerprint)
  return bytes_fingerprint_.GetNoArena();
}
inline void DeviceReport::set_bytes_fingerprint(const ::std::string& value) {
  set_has_bytes_fingerprint();
  bytes_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceReport.bytes_fingerprint)
}
#if LANG_CXX11
inline void DeviceReport::set_bytes_fingerprint(::std::string&& value) {
  set_has_bytes_fingerprint();
  bytes_fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceReport.bytes_fingerprint)
}
#endif
inline void DeviceReport::set_bytes_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_fingerprint();
  bytes_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceReport.bytes_fingerprint)
}
inline void DeviceReport::set_bytes_fingerprint(const void* value, size_t size) {
  set_has_bytes_fingerprint();
  bytes_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceReport.bytes_fingerprint)
}
inline ::std::string* DeviceReport::mutable_bytes_fingerprint() {
  set_has_bytes_fingerprint();
  // @@protoc_insertion_point(field_mutable:DeviceReport.bytes_fingerprint)
  return bytes_fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceReport::release_bytes_fingerprint() {
  // @@protoc_insertion_point(field_release:DeviceReport.bytes_fingerprint)
  clear_has_bytes_fingerprint();
  return bytes_fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceReport::set_allocated_bytes_fingerprint(::std::string* bytes_fingerprint) {
  if (bytes_fingerprint != NULL) {
    set_has_bytes_fingerprint();
  } else {
    clear_has_bytes_fingerprint();
  }
  bytes_fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:DeviceReport.bytes_fingerprint)
}

// optional bytes bytes_boot_id = 6;
inline bool DeviceReport::has_bytes_boot_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceReport::set_has_bytes_boot_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceReport::clear_has_bytes_boot_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceReport::clear_bytes_boot_id() {
  bytes_boot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_boot_id();
}
inline const ::std::string& DeviceReport::bytes_boot_id() const {
  // @@protoc_insertion_point(field_get:DeviceReport.bytes_boot_id)
  return bytes_boot_id_.GetNoArena();
}
inline void DeviceReport::set_bytes_boot_id(const ::std::string& value) {
  set_has_bytes_boot_id();
  bytes_boot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceReport.bytes_boot_id)
}
#if LANG_CXX11
inline void DeviceReport::set_bytes_boot_id(::std::string&& value) {
  set_has_bytes_boot_id();
  bytes_boot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceReport.bytes_boot_id)
}
#endif
inline void DeviceReport::set_bytes_boot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_boot_id();
  bytes_boot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceReport.bytes_boot_id)
}
inline void DeviceReport::set_bytes_boot_id(const void* value, size_t size) {
  set_has_bytes_boot_id();
  bytes_boot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceReport.bytes_boot_id)
}
inline ::std::string* DeviceReport::mutable_bytes_boot_id() {
  set_has_bytes_boot_id();
  // @@protoc_insertion_point(field_mutable:DeviceReport.bytes_boot_id)
  return bytes_boot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceReport::release_bytes_boot_id() {
  // @@protoc_insertion_point(field_release:DeviceReport.bytes_boot_id)
  clear_has_bytes_boot_id();
  return bytes_boot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceReport::set_allocated_bytes_boot_id(::std::string* bytes_boot_id) {
  if (bytes_boot_id != NULL) {
    set_has_bytes_boot_id();
  } else {
    clear_has_bytes_boot_id();
  }
  bytes_boot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_boot_id);
  // @@protoc_insertion_point(field_set_allocated:DeviceReport.bytes_boot_id)
}

// optional bytes bytes_android_id = 7;
inline bool DeviceReport::has_bytes_android_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceReport::set_has_bytes_android_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceReport::clear_has_bytes_android_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceReport::clear_bytes_android_id() {
  bytes_android_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_android_id();
}
inline const ::std::string& DeviceReport::bytes_android_id() const {
  // @@protoc_insertion_point(field_get:DeviceReport.bytes_android_id)
  return bytes_android_id_.GetNoArena();
}
inline void DeviceReport::set_bytes_android_id(const ::std::string& value) {
  set_has_bytes_android_id();
  bytes_android_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceReport.bytes_android_id)
}
#if LANG_CXX11
inline void DeviceReport::set_bytes_android_id(::std::string&& value) {
  set_has_bytes_android_id();
  bytes_android_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceReport.bytes_android_id)
}
#endif
inline void DeviceReport::set_bytes_android_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_android_id();
  bytes_android_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceReport.bytes_android_id)
}
inline void DeviceReport::set_bytes_android_id(const void* value, size_t size) {
  set_has_bytes_android_id();
  bytes_android_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceReport.bytes_android_id)
}
inline ::std::string* DeviceReport::mutable_bytes_android_id() {
  set_has_bytes_android_id();
  // @@protoc_insertion_point(field_mutable:DeviceReport.bytes_android_id)
  return bytes_android_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceReport::release_bytes_android_id() {
  // @@protoc_insertion_point(field_release:DeviceReport.bytes_android_id)
  clear_has_bytes_android_id();
  return bytes_android_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceReport::set_allocated_bytes_android_id(::std::string* bytes_android_id) {
  if (bytes_android_id != NULL) {
    set_has_bytes_android_id();
  } else {
    clear_has_bytes_android_id();
  }
  bytes_android_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_android_id);
  // @@protoc_insertion_point(field_set_allocated:DeviceReport.bytes_android_id)
}

// optional bytes bytes_baseband = 8;
inline bool DeviceReport::has_bytes_baseband() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceReport::set_has_bytes_baseband() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeviceReport::clear_has_bytes_baseband() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeviceReport::clear_bytes_baseband() {
  bytes_baseband_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_baseband();
}
inline const ::std::string& DeviceReport::bytes_baseband() const {
  // @@protoc_insertion_point(field_get:DeviceReport.bytes_baseband)
  return bytes_baseband_.GetNoArena();
}
inline void DeviceReport::set_bytes_baseband(const ::std::string& value) {
  set_has_bytes_baseband();
  bytes_baseband_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceReport.bytes_baseband)
}
#if LANG_CXX11
inline void DeviceReport::set_bytes_baseband(::std::string&& value) {
  set_has_bytes_baseband();
  bytes_baseband_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceReport.bytes_baseband)
}
#endif
inline void DeviceReport::set_bytes_baseband(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_baseband();
  bytes_baseband_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceReport.bytes_baseband)
}
inline void DeviceReport::set_bytes_baseband(const void* value, size_t size) {
  set_has_bytes_baseband();
  bytes_baseband_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceReport.bytes_baseband)
}
inline ::std::string* DeviceReport::mutable_bytes_baseband() {
  set_has_bytes_baseband();
  // @@protoc_insertion_point(field_mutable:DeviceReport.bytes_baseband)
  return bytes_baseband_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceReport::release_bytes_baseband() {
  // @@protoc_insertion_point(field_release:DeviceReport.bytes_baseband)
  clear_has_bytes_baseband();
  return bytes_baseband_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceReport::set_allocated_bytes_baseband(::std::string* bytes_baseband) {
  if (bytes_baseband != NULL) {
    set_has_bytes_baseband();
  } else {
    clear_has_bytes_baseband();
  }
  bytes_baseband_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_baseband);
  // @@protoc_insertion_point(field_set_allocated:DeviceReport.bytes_baseband)
}

// optional bytes bytes_inner_ver = 9;
inline bool DeviceReport::has_bytes_inner_ver() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceReport::set_has_bytes_inner_ver() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeviceReport::clear_has_bytes_inner_ver() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeviceReport::clear_bytes_inner_ver() {
  bytes_inner_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes_inner_ver();
}
inline const ::std::string& DeviceReport::bytes_inner_ver() const {
  // @@protoc_insertion_point(field_get:DeviceReport.bytes_inner_ver)
  return bytes_inner_ver_.GetNoArena();
}
inline void DeviceReport::set_bytes_inner_ver(const ::std::string& value) {
  set_has_bytes_inner_ver();
  bytes_inner_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceReport.bytes_inner_ver)
}
#if LANG_CXX11
inline void DeviceReport::set_bytes_inner_ver(::std::string&& value) {
  set_has_bytes_inner_ver();
  bytes_inner_ver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceReport.bytes_inner_ver)
}
#endif
inline void DeviceReport::set_bytes_inner_ver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes_inner_ver();
  bytes_inner_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceReport.bytes_inner_ver)
}
inline void DeviceReport::set_bytes_inner_ver(const void* value, size_t size) {
  set_has_bytes_inner_ver();
  bytes_inner_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceReport.bytes_inner_ver)
}
inline ::std::string* DeviceReport::mutable_bytes_inner_ver() {
  set_has_bytes_inner_ver();
  // @@protoc_insertion_point(field_mutable:DeviceReport.bytes_inner_ver)
  return bytes_inner_ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceReport::release_bytes_inner_ver() {
  // @@protoc_insertion_point(field_release:DeviceReport.bytes_inner_ver)
  clear_has_bytes_inner_ver();
  return bytes_inner_ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceReport::set_allocated_bytes_inner_ver(::std::string* bytes_inner_ver) {
  if (bytes_inner_ver != NULL) {
    set_has_bytes_inner_ver();
  } else {
    clear_has_bytes_inner_ver();
  }
  bytes_inner_ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_inner_ver);
  // @@protoc_insertion_point(field_set_allocated:DeviceReport.bytes_inner_ver)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DeviceReport_2eproto__INCLUDED
