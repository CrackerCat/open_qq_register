// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __SVCREQREGISTER_H_
#define __SVCREQREGISTER_H_

#include <map>
#include <string>
#include <vector>
#include "Tars.h"
using namespace std;


namespace PushService_SvcReqRegister
{
    struct SvcReqRegister : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "PushService_SvcReqRegister.SvcReqRegister";
        }
        static string MD5()
        {
            return "f9d3949871eb822a9cb69820d0073687";
        }
        SvcReqRegister()
        :selfqq(0),biztype(0),unknow2(0),unknow3(""),what_action(0),unknow5(0),unknow6(0),unknow7(0),unknow8(0),unknow9(0),unknow10(0),unknow11(0),unknow12(0),unknow13(""),unknow14(0),unknow17(0),unknow18(0),phone_model(""),phone_model_real(""),android_version(""),unknow22(0),unknow23(0)
        {
        }
        void resetDefautlt()
        {
            selfqq = 0;
            biztype = 0;
            unknow2 = 0;
            unknow3 = "";
            what_action = 0;
            unknow5 = 0;
            unknow6 = 0;
            unknow7 = 0;
            unknow8 = 0;
            unknow9 = 0;
            unknow10 = 0;
            unknow11 = 0;
            unknow12 = 0;
            unknow13 = "";
            unknow14 = 0;
            unknow17 = 0;
            unknow18 = 0;
            phone_model = "";
            phone_model_real = "";
            android_version = "";
            unknow22 = 0;
            unknow23 = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(selfqq, 0);
            _os.write(biztype, 1);
            _os.write(unknow2, 2);
            _os.write(unknow3, 3);
            _os.write(what_action, 4);
            _os.write(unknow5, 5);
            _os.write(unknow6, 6);
            _os.write(unknow7, 7);
            _os.write(unknow8, 8);
            _os.write(unknow9, 9);
            _os.write(unknow10, 10);
            _os.write(unknow11, 11);
            _os.write(unknow12, 12);
            _os.write(unknow13, 13);
            _os.write(unknow14, 14);
            _os.write(imeimac_md5, 16);
            _os.write(unknow17, 17);
            _os.write(unknow18, 18);
            _os.write(phone_model, 19);
            _os.write(phone_model_real, 20);
            _os.write(android_version, 21);
            _os.write(unknow22, 22);
            _os.write(unknow23, 23);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(selfqq, 0, true);
            _is.read(biztype, 1, true);
            _is.read(unknow2, 2, true);
            _is.read(unknow3, 3, true);
            _is.read(what_action, 4, true);
            _is.read(unknow5, 5, true);
            _is.read(unknow6, 6, true);
            _is.read(unknow7, 7, true);
            _is.read(unknow8, 8, true);
            _is.read(unknow9, 9, true);
            _is.read(unknow10, 10, true);
            _is.read(unknow11, 11, true);
            _is.read(unknow12, 12, true);
            _is.read(unknow13, 13, true);
            _is.read(unknow14, 14, true);
            _is.read(imeimac_md5, 16, true);
            _is.read(unknow17, 17, true);
            _is.read(unknow18, 18, true);
            _is.read(phone_model, 19, true);
            _is.read(phone_model_real, 20, true);
            _is.read(android_version, 21, true);
            _is.read(unknow22, 22, true);
            _is.read(unknow23, 23, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(selfqq,"selfqq");
            _ds.display(biztype,"biztype");
            _ds.display(unknow2,"unknow2");
            _ds.display(unknow3,"unknow3");
            _ds.display(what_action,"what_action");
            _ds.display(unknow5,"unknow5");
            _ds.display(unknow6,"unknow6");
            _ds.display(unknow7,"unknow7");
            _ds.display(unknow8,"unknow8");
            _ds.display(unknow9,"unknow9");
            _ds.display(unknow10,"unknow10");
            _ds.display(unknow11,"unknow11");
            _ds.display(unknow12,"unknow12");
            _ds.display(unknow13,"unknow13");
            _ds.display(unknow14,"unknow14");
            _ds.display(imeimac_md5,"imeimac_md5");
            _ds.display(unknow17,"unknow17");
            _ds.display(unknow18,"unknow18");
            _ds.display(phone_model,"phone_model");
            _ds.display(phone_model_real,"phone_model_real");
            _ds.display(android_version,"android_version");
            _ds.display(unknow22,"unknow22");
            _ds.display(unknow23,"unknow23");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(selfqq, true);
            _ds.displaySimple(biztype, true);
            _ds.displaySimple(unknow2, true);
            _ds.displaySimple(unknow3, true);
            _ds.displaySimple(what_action, true);
            _ds.displaySimple(unknow5, true);
            _ds.displaySimple(unknow6, true);
            _ds.displaySimple(unknow7, true);
            _ds.displaySimple(unknow8, true);
            _ds.displaySimple(unknow9, true);
            _ds.displaySimple(unknow10, true);
            _ds.displaySimple(unknow11, true);
            _ds.displaySimple(unknow12, true);
            _ds.displaySimple(unknow13, true);
            _ds.displaySimple(unknow14, true);
            _ds.displaySimple(imeimac_md5, true);
            _ds.displaySimple(unknow17, true);
            _ds.displaySimple(unknow18, true);
            _ds.displaySimple(phone_model, true);
            _ds.displaySimple(phone_model_real, true);
            _ds.displaySimple(android_version, true);
            _ds.displaySimple(unknow22, true);
            _ds.displaySimple(unknow23, false);
            return _os;
        }
    public:
        tars::Int64 selfqq;
        tars::Int32 biztype;
        tars::Int32 unknow2;
        std::string unknow3;
        tars::Int32 what_action;
        tars::Int32 unknow5;
        tars::Int32 unknow6;
        tars::Int32 unknow7;
        tars::Int32 unknow8;
        tars::Int32 unknow9;
        tars::Int32 unknow10;
        tars::Int32 unknow11;
        tars::Int32 unknow12;
        std::string unknow13;
        tars::Int32 unknow14;
        vector<tars::Char> imeimac_md5;
        tars::Int32 unknow17;
        tars::Int32 unknow18;
        std::string phone_model;
        std::string phone_model_real;
        std::string android_version;
        tars::Int32 unknow22;
        tars::Int32 unknow23;
    };
    inline bool operator==(const SvcReqRegister&l, const SvcReqRegister&r)
    {
        return l.selfqq == r.selfqq && l.biztype == r.biztype && l.unknow2 == r.unknow2 && l.unknow3 == r.unknow3 && l.what_action == r.what_action && l.unknow5 == r.unknow5 && l.unknow6 == r.unknow6 && l.unknow7 == r.unknow7 && l.unknow8 == r.unknow8 && l.unknow9 == r.unknow9 && l.unknow10 == r.unknow10 && l.unknow11 == r.unknow11 && l.unknow12 == r.unknow12 && l.unknow13 == r.unknow13 && l.unknow14 == r.unknow14 && l.imeimac_md5 == r.imeimac_md5 && l.unknow17 == r.unknow17 && l.unknow18 == r.unknow18 && l.phone_model == r.phone_model && l.phone_model_real == r.phone_model_real && l.android_version == r.android_version && l.unknow22 == r.unknow22 && l.unknow23 == r.unknow23;
    }
    inline bool operator!=(const SvcReqRegister&l, const SvcReqRegister&r)
    {
        return !(l == r);
    }


}



#endif
