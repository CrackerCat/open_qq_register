// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __KQQ_PROFILESERVICE_PROFILESERVANTOBJ_H_
#define __KQQ_PROFILESERVICE_PROFILESERVANTOBJ_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;


namespace KQQ_ProfileService_ProfileServantObj
{
    struct GroupMngReq_AddGroup : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "KQQ_ProfileService_ProfileServantObj.GroupMngReq_AddGroup";
        }
        static string MD5()
        {
            return "4bcd9bebcb0cef0f2811a855cd287508";
        }
        GroupMngReq_AddGroup()
        :action(0),selfqq(0),unknow3(0),unknow4(""),unknow5(0),unknow6(0),unknow7(0),unknow8(0),unknow9(0),unknow10(0),unknow12("")
        {
        }
        void resetDefautlt()
        {
            action = 0;
            selfqq = 0;
            unknow3 = 0;
            unknow4 = "";
            unknow5 = 0;
            unknow6 = 0;
            unknow7 = 0;
            unknow8 = 0;
            unknow9 = 0;
            unknow10 = 0;
            unknow12 = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(action, 0);
            _os.write(selfqq, 1);
            _os.write(extra_msg, 2);
            _os.write(unknow3, 3);
            _os.write(unknow4, 4);
            _os.write(unknow5, 5);
            _os.write(unknow6, 6);
            _os.write(unknow7, 7);
            _os.write(unknow8, 8);
            _os.write(unknow9, 9);
            _os.write(unknow10, 10);
            _os.write(unknow12, 12);
            _os.write(pb_msg, 13);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(action, 0, true);
            _is.read(selfqq, 1, true);
            _is.read(extra_msg, 2, true);
            _is.read(unknow3, 3, true);
            _is.read(unknow4, 4, true);
            _is.read(unknow5, 5, true);
            _is.read(unknow6, 6, true);
            _is.read(unknow7, 7, true);
            _is.read(unknow8, 8, true);
            _is.read(unknow9, 9, true);
            _is.read(unknow10, 10, true);
            _is.read(unknow12, 12, true);
            _is.read(pb_msg, 13, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(action,"action");
            _ds.display(selfqq,"selfqq");
            _ds.display(extra_msg,"extra_msg");
            _ds.display(unknow3,"unknow3");
            _ds.display(unknow4,"unknow4");
            _ds.display(unknow5,"unknow5");
            _ds.display(unknow6,"unknow6");
            _ds.display(unknow7,"unknow7");
            _ds.display(unknow8,"unknow8");
            _ds.display(unknow9,"unknow9");
            _ds.display(unknow10,"unknow10");
            _ds.display(unknow12,"unknow12");
            _ds.display(pb_msg,"pb_msg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(action, true);
            _ds.displaySimple(selfqq, true);
            _ds.displaySimple(extra_msg, true);
            _ds.displaySimple(unknow3, true);
            _ds.displaySimple(unknow4, true);
            _ds.displaySimple(unknow5, true);
            _ds.displaySimple(unknow6, true);
            _ds.displaySimple(unknow7, true);
            _ds.displaySimple(unknow8, true);
            _ds.displaySimple(unknow9, true);
            _ds.displaySimple(unknow10, true);
            _ds.displaySimple(unknow12, true);
            _ds.displaySimple(pb_msg, false);
            return _os;
        }
    public:
        tars::Char action;
        tars::Int64 selfqq;
        vector<tars::Char> extra_msg;
        tars::Int32 unknow3;
        std::string unknow4;
        tars::Int32 unknow5;
        tars::Int32 unknow6;
        tars::Int32 unknow7;
        tars::Int32 unknow8;
        tars::Int32 unknow9;
        tars::Int32 unknow10;
        std::string unknow12;
        vector<tars::Char> pb_msg;
    };
    inline bool operator==(const GroupMngReq_AddGroup&l, const GroupMngReq_AddGroup&r)
    {
        return l.action == r.action && l.selfqq == r.selfqq && l.extra_msg == r.extra_msg && l.unknow3 == r.unknow3 && l.unknow4 == r.unknow4 && l.unknow5 == r.unknow5 && l.unknow6 == r.unknow6 && l.unknow7 == r.unknow7 && l.unknow8 == r.unknow8 && l.unknow9 == r.unknow9 && l.unknow10 == r.unknow10 && l.unknow12 == r.unknow12 && l.pb_msg == r.pb_msg;
    }
    inline bool operator!=(const GroupMngReq_AddGroup&l, const GroupMngReq_AddGroup&r)
    {
        return !(l == r);
    }

    struct GroupMngReq_ExitGroup : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "KQQ_ProfileService_ProfileServantObj.GroupMngReq_ExitGroup";
        }
        static string MD5()
        {
            return "d09bb512af26f870c1ea5cf8434eefe1";
        }
        GroupMngReq_ExitGroup()
        :action(0),selfqq(0),unknow3(0),unknow4(""),unknow5(0),unknow6(0),unknow7(0),unknow8(0),unknow9(0),unknow10(0),unknow11(""),unknow12(""),unknow14(""),unknow15(""),unknow16(0)
        {
        }
        void resetDefautlt()
        {
            action = 0;
            selfqq = 0;
            unknow3 = 0;
            unknow4 = "";
            unknow5 = 0;
            unknow6 = 0;
            unknow7 = 0;
            unknow8 = 0;
            unknow9 = 0;
            unknow10 = 0;
            unknow11 = "";
            unknow12 = "";
            unknow14 = "";
            unknow15 = "";
            unknow16 = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(action, 0);
            _os.write(selfqq, 1);
            _os.write(extra_msg, 2);
            _os.write(unknow3, 3);
            _os.write(unknow4, 4);
            _os.write(unknow5, 5);
            _os.write(unknow6, 6);
            _os.write(unknow7, 7);
            _os.write(unknow8, 8);
            _os.write(unknow9, 9);
            _os.write(unknow10, 10);
            _os.write(unknow11, 11);
            _os.write(unknow12, 12);
            _os.write(unknow14, 14);
            _os.write(unknow15, 15);
            _os.write(unknow16, 16);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(action, 0, true);
            _is.read(selfqq, 1, true);
            _is.read(extra_msg, 2, true);
            _is.read(unknow3, 3, true);
            _is.read(unknow4, 4, true);
            _is.read(unknow5, 5, true);
            _is.read(unknow6, 6, true);
            _is.read(unknow7, 7, true);
            _is.read(unknow8, 8, true);
            _is.read(unknow9, 9, true);
            _is.read(unknow10, 10, true);
            _is.read(unknow11, 11, true);
            _is.read(unknow12, 12, true);
            _is.read(unknow14, 14, true);
            _is.read(unknow15, 15, true);
            _is.read(unknow16, 16, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(action,"action");
            _ds.display(selfqq,"selfqq");
            _ds.display(extra_msg,"extra_msg");
            _ds.display(unknow3,"unknow3");
            _ds.display(unknow4,"unknow4");
            _ds.display(unknow5,"unknow5");
            _ds.display(unknow6,"unknow6");
            _ds.display(unknow7,"unknow7");
            _ds.display(unknow8,"unknow8");
            _ds.display(unknow9,"unknow9");
            _ds.display(unknow10,"unknow10");
            _ds.display(unknow11,"unknow11");
            _ds.display(unknow12,"unknow12");
            _ds.display(unknow14,"unknow14");
            _ds.display(unknow15,"unknow15");
            _ds.display(unknow16,"unknow16");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(action, true);
            _ds.displaySimple(selfqq, true);
            _ds.displaySimple(extra_msg, true);
            _ds.displaySimple(unknow3, true);
            _ds.displaySimple(unknow4, true);
            _ds.displaySimple(unknow5, true);
            _ds.displaySimple(unknow6, true);
            _ds.displaySimple(unknow7, true);
            _ds.displaySimple(unknow8, true);
            _ds.displaySimple(unknow9, true);
            _ds.displaySimple(unknow10, true);
            _ds.displaySimple(unknow11, true);
            _ds.displaySimple(unknow12, true);
            _ds.displaySimple(unknow14, true);
            _ds.displaySimple(unknow15, true);
            _ds.displaySimple(unknow16, false);
            return _os;
        }
    public:
        tars::Char action;
        tars::Int64 selfqq;
        vector<tars::Char> extra_msg;
        tars::Int32 unknow3;
        std::string unknow4;
        tars::Int32 unknow5;
        tars::Int32 unknow6;
        tars::Int32 unknow7;
        tars::Int32 unknow8;
        tars::Int32 unknow9;
        tars::Int32 unknow10;
        std::string unknow11;
        std::string unknow12;
        std::string unknow14;
        std::string unknow15;
        tars::Int32 unknow16;
    };
    inline bool operator==(const GroupMngReq_ExitGroup&l, const GroupMngReq_ExitGroup&r)
    {
        return l.action == r.action && l.selfqq == r.selfqq && l.extra_msg == r.extra_msg && l.unknow3 == r.unknow3 && l.unknow4 == r.unknow4 && l.unknow5 == r.unknow5 && l.unknow6 == r.unknow6 && l.unknow7 == r.unknow7 && l.unknow8 == r.unknow8 && l.unknow9 == r.unknow9 && l.unknow10 == r.unknow10 && l.unknow11 == r.unknow11 && l.unknow12 == r.unknow12 && l.unknow14 == r.unknow14 && l.unknow15 == r.unknow15 && l.unknow16 == r.unknow16;
    }
    inline bool operator!=(const GroupMngReq_ExitGroup&l, const GroupMngReq_ExitGroup&r)
    {
        return !(l == r);
    }


}



#endif
