// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __KQQ_CONFIGSERVICE_CONFIGSERVANTOBJ_H_
#define __KQQ_CONFIGSERVICE_CONFIGSERVANTOBJ_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;


namespace KQQ_ProfileService_ConfigServantObj
{
    struct unknow_struct : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "KQQ_ProfileService_ConfigServantObj.unknow_struct";
        }
        static string MD5()
        {
            return "7b010a6336d210a506b1eb4bf4c1e014";
        }
        unknow_struct()
        :unknow(0)
        {
        }
        void resetDefautlt()
        {
            unknow = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(unknow, 1);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(unknow, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(unknow,"unknow");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(unknow, false);
            return _os;
        }
    public:
        tars::Int32 unknow;
    };
    inline bool operator==(const unknow_struct&l, const unknow_struct&r)
    {
        return l.unknow == r.unknow;
    }
    inline bool operator!=(const unknow_struct&l, const unknow_struct&r)
    {
        return !(l == r);
    }

    struct SDKConfReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "KQQ_ProfileService_ConfigServantObj.SDKConfReq";
        }
        static string MD5()
        {
            return "902f08d6233e78869dff48999db1393f";
        }
        SDKConfReq()
        :unknow(0),timestamp1(0),unknow3(0),timestamp2(0)
        {
        }
        void resetDefautlt()
        {
            unknow = 0;
            timestamp1 = 0;
            unknow3 = 0;
            timestamp2 = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(unknow, 1);
            _os.write(timestamp1, 2);
            _os.write(unknow2, 3);
            _os.write(unknow3, 4);
            _os.write(timestamp2, 5);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(unknow, 1, true);
            _is.read(timestamp1, 2, true);
            _is.read(unknow2, 3, true);
            _is.read(unknow3, 4, true);
            _is.read(timestamp2, 5, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(unknow,"unknow");
            _ds.display(timestamp1,"timestamp1");
            _ds.display(unknow2,"unknow2");
            _ds.display(unknow3,"unknow3");
            _ds.display(timestamp2,"timestamp2");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(unknow, true);
            _ds.displaySimple(timestamp1, true);
            _ds.displaySimple(unknow2, true);
            _ds.displaySimple(unknow3, true);
            _ds.displaySimple(timestamp2, false);
            return _os;
        }
    public:
        tars::Int32 unknow;
        tars::Int32 timestamp1;
        vector<KQQ_ProfileService_ConfigServantObj::unknow_struct> unknow2;
        tars::Int32 unknow3;
        tars::Int32 timestamp2;
    };
    inline bool operator==(const SDKConfReq&l, const SDKConfReq&r)
    {
        return l.unknow == r.unknow && l.timestamp1 == r.timestamp1 && l.unknow2 == r.unknow2 && l.unknow3 == r.unknow3 && l.timestamp2 == r.timestamp2;
    }
    inline bool operator!=(const SDKConfReq&l, const SDKConfReq&r)
    {
        return !(l == r);
    }


}



#endif
