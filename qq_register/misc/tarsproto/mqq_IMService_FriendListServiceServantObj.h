// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __MQQ_IMSERVICE_FRIENDLISTSERVICESERVANTOBJ_H_
#define __MQQ_IMSERVICE_FRIENDLISTSERVICESERVANTOBJ_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;


namespace mqq_IMService_FriendListServiceServantObj
{
    struct GetUserAddFriendSettingReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "mqq_IMService_FriendListServiceServantObj.GetUserAddFriendSettingReq";
        }
        static string MD5()
        {
            return "e194a8157ceece22a9ee209f34647a08";
        }
        GetUserAddFriendSettingReq()
        :selfqq(0),add_qq(0),unknow2(0),unknow3(0),unknow5(0)
        {
        }
        void resetDefautlt()
        {
            selfqq = 0;
            add_qq = 0;
            unknow2 = 0;
            unknow3 = 0;
            unknow5 = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(selfqq, 0);
            _os.write(add_qq, 1);
            _os.write(unknow2, 2);
            _os.write(unknow3, 3);
            _os.write(unknow5, 5);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(selfqq, 0, true);
            _is.read(add_qq, 1, true);
            _is.read(unknow2, 2, true);
            _is.read(unknow3, 3, true);
            _is.read(unknow5, 5, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(selfqq,"selfqq");
            _ds.display(add_qq,"add_qq");
            _ds.display(unknow2,"unknow2");
            _ds.display(unknow3,"unknow3");
            _ds.display(unknow5,"unknow5");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(selfqq, true);
            _ds.displaySimple(add_qq, true);
            _ds.displaySimple(unknow2, true);
            _ds.displaySimple(unknow3, true);
            _ds.displaySimple(unknow5, false);
            return _os;
        }
    public:
        tars::Int64 selfqq;
        tars::Int64 add_qq;
        tars::Int32 unknow2;
        tars::Int32 unknow3;
        tars::Char unknow5;
    };
    inline bool operator==(const GetUserAddFriendSettingReq&l, const GetUserAddFriendSettingReq&r)
    {
        return l.selfqq == r.selfqq && l.add_qq == r.add_qq && l.unknow2 == r.unknow2 && l.unknow3 == r.unknow3 && l.unknow5 == r.unknow5;
    }
    inline bool operator!=(const GetUserAddFriendSettingReq&l, const GetUserAddFriendSettingReq&r)
    {
        return !(l == r);
    }

    struct GetUserAddFriendSettingRsp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "mqq_IMService_FriendListServiceServantObj.GetUserAddFriendSettingRsp";
        }
        static string MD5()
        {
            return "14914cc8f9faace9757c9443702ec2cd";
        }
        GetUserAddFriendSettingRsp()
        :selfqq(0),add_qq(0),verifytype_int(0),unknow4(0),unknow5(0),unknow7(0)
        {
        }
        void resetDefautlt()
        {
            selfqq = 0;
            add_qq = 0;
            verifytype_int = 0;
            unknow4 = 0;
            unknow5 = 0;
            unknow7 = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(selfqq, 0);
            _os.write(add_qq, 1);
            _os.write(verifytype_int, 2);
            _os.write(questions, 3);
            _os.write(unknow4, 4);
            _os.write(unknow5, 5);
            _os.write(unknow6, 6);
            _os.write(unknow7, 7);
            _os.write(unknow8, 8);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(selfqq, 0, true);
            _is.read(add_qq, 1, true);
            _is.read(verifytype_int, 2, true);
            _is.read(questions, 3, true);
            _is.read(unknow4, 4, true);
            _is.read(unknow5, 5, true);
            _is.read(unknow6, 6, true);
            _is.read(unknow7, 7, true);
            _is.read(unknow8, 8, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(selfqq,"selfqq");
            _ds.display(add_qq,"add_qq");
            _ds.display(verifytype_int,"verifytype_int");
            _ds.display(questions,"questions");
            _ds.display(unknow4,"unknow4");
            _ds.display(unknow5,"unknow5");
            _ds.display(unknow6,"unknow6");
            _ds.display(unknow7,"unknow7");
            _ds.display(unknow8,"unknow8");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(selfqq, true);
            _ds.displaySimple(add_qq, true);
            _ds.displaySimple(verifytype_int, true);
            _ds.displaySimple(questions, true);
            _ds.displaySimple(unknow4, true);
            _ds.displaySimple(unknow5, true);
            _ds.displaySimple(unknow6, true);
            _ds.displaySimple(unknow7, true);
            _ds.displaySimple(unknow8, false);
            return _os;
        }
    public:
        tars::Int64 selfqq;
        tars::Int64 add_qq;
        tars::Char verifytype_int;
        vector<std::string> questions;
        tars::Int32 unknow4;
        tars::Int32 unknow5;
        vector<tars::Char> unknow6;
        tars::Int32 unknow7;
        vector<tars::Char> unknow8;
    };
    inline bool operator==(const GetUserAddFriendSettingRsp&l, const GetUserAddFriendSettingRsp&r)
    {
        return l.selfqq == r.selfqq && l.add_qq == r.add_qq && l.verifytype_int == r.verifytype_int && l.questions == r.questions && l.unknow4 == r.unknow4 && l.unknow5 == r.unknow5 && l.unknow6 == r.unknow6 && l.unknow7 == r.unknow7 && l.unknow8 == r.unknow8;
    }
    inline bool operator!=(const GetUserAddFriendSettingRsp&l, const GetUserAddFriendSettingRsp&r)
    {
        return !(l == r);
    }

    struct GetAutoInfoReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "mqq_IMService_FriendListServiceServantObj.GetAutoInfoReq";
        }
        static string MD5()
        {
            return "a1187474187669c137dd651d41f6735f";
        }
        GetAutoInfoReq()
        :selfqq(0),add_qq(0),verifytype_int(0),unknow3(0),unknow4(0)
        {
        }
        void resetDefautlt()
        {
            selfqq = 0;
            add_qq = 0;
            verifytype_int = 0;
            unknow3 = 0;
            unknow4 = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(selfqq, 0);
            _os.write(add_qq, 1);
            _os.write(verifytype_int, 2);
            _os.write(unknow3, 3);
            _os.write(unknow4, 4);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(selfqq, 0, true);
            _is.read(add_qq, 1, true);
            _is.read(verifytype_int, 2, true);
            _is.read(unknow3, 3, true);
            _is.read(unknow4, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(selfqq,"selfqq");
            _ds.display(add_qq,"add_qq");
            _ds.display(verifytype_int,"verifytype_int");
            _ds.display(unknow3,"unknow3");
            _ds.display(unknow4,"unknow4");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(selfqq, true);
            _ds.displaySimple(add_qq, true);
            _ds.displaySimple(verifytype_int, true);
            _ds.displaySimple(unknow3, true);
            _ds.displaySimple(unknow4, false);
            return _os;
        }
    public:
        tars::Int64 selfqq;
        tars::Int64 add_qq;
        tars::Char verifytype_int;
        tars::Int32 unknow3;
        tars::Int32 unknow4;
    };
    inline bool operator==(const GetAutoInfoReq&l, const GetAutoInfoReq&r)
    {
        return l.selfqq == r.selfqq && l.add_qq == r.add_qq && l.verifytype_int == r.verifytype_int && l.unknow3 == r.unknow3 && l.unknow4 == r.unknow4;
    }
    inline bool operator!=(const GetAutoInfoReq&l, const GetAutoInfoReq&r)
    {
        return !(l == r);
    }

    struct GetAutoInfoRsp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "mqq_IMService_FriendListServiceServantObj.GetAutoInfoRsp";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GetAutoInfoRsp()
        :unknow2_str(""),unknow4_str("")
        {
        }
        void resetDefautlt()
        {
            unknow2_str = "";
            unknow4_str = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(unknow2_str, 2);
            _os.write(unknow4_str, 4);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(unknow2_str, 2, true);
            _is.read(unknow4_str, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(unknow2_str,"unknow2_str");
            _ds.display(unknow4_str,"unknow4_str");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(unknow2_str, true);
            _ds.displaySimple(unknow4_str, false);
            return _os;
        }
    public:
        std::string unknow2_str;
        std::string unknow4_str;
    };
    inline bool operator==(const GetAutoInfoRsp&l, const GetAutoInfoRsp&r)
    {
        return l.unknow2_str == r.unknow2_str && l.unknow4_str == r.unknow4_str;
    }
    inline bool operator!=(const GetAutoInfoRsp&l, const GetAutoInfoRsp&r)
    {
        return !(l == r);
    }

    struct AddFriendReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "mqq_IMService_FriendListServiceServantObj.AddFriendReq";
        }
        static string MD5()
        {
            return "28978f3d02291171964a5df00dd0f979";
        }
        AddFriendReq()
        :selfqq(0),add_qq(0),verifytype_int(0),unknow3_int(0),unknow4_int(0),msg_size(0),str_answer_msg(""),unknow7_int(0),unknow8_int(0),unknow10_int(0),unknow11_int(0),unknow15_int(0),unknow18_int(0)
        {
        }
        void resetDefautlt()
        {
            selfqq = 0;
            add_qq = 0;
            verifytype_int = 0;
            unknow3_int = 0;
            unknow4_int = 0;
            msg_size = 0;
            str_answer_msg = "";
            unknow7_int = 0;
            unknow8_int = 0;
            unknow10_int = 0;
            unknow11_int = 0;
            unknow15_int = 0;
            unknow18_int = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(selfqq, 0);
            _os.write(add_qq, 1);
            _os.write(verifytype_int, 2);
            _os.write(unknow3_int, 3);
            _os.write(unknow4_int, 4);
            _os.write(msg_size, 5);
            _os.write(str_answer_msg, 6);
            _os.write(unknow7_int, 7);
            _os.write(unknow8_int, 8);
            _os.write(unknow10_int, 10);
            _os.write(unknow11_int, 11);
            if (groupcode.size() > 0)
            {
                _os.write(groupcode, 14);
            }
            _os.write(unknow15_int, 15);
            if (groupmem_name.size() > 0)
            {
                _os.write(groupmem_name, 16);
            }
            _os.write(unknow18_int, 18);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(selfqq, 0, true);
            _is.read(add_qq, 1, true);
            _is.read(verifytype_int, 2, true);
            _is.read(unknow3_int, 3, true);
            _is.read(unknow4_int, 4, true);
            _is.read(msg_size, 5, true);
            _is.read(str_answer_msg, 6, true);
            _is.read(unknow7_int, 7, true);
            _is.read(unknow8_int, 8, true);
            _is.read(unknow10_int, 10, true);
            _is.read(unknow11_int, 11, true);
            _is.read(groupcode, 14, false);
            _is.read(unknow15_int, 15, true);
            _is.read(groupmem_name, 16, false);
            _is.read(unknow18_int, 18, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(selfqq,"selfqq");
            _ds.display(add_qq,"add_qq");
            _ds.display(verifytype_int,"verifytype_int");
            _ds.display(unknow3_int,"unknow3_int");
            _ds.display(unknow4_int,"unknow4_int");
            _ds.display(msg_size,"msg_size");
            _ds.display(str_answer_msg,"str_answer_msg");
            _ds.display(unknow7_int,"unknow7_int");
            _ds.display(unknow8_int,"unknow8_int");
            _ds.display(unknow10_int,"unknow10_int");
            _ds.display(unknow11_int,"unknow11_int");
            _ds.display(groupcode,"groupcode");
            _ds.display(unknow15_int,"unknow15_int");
            _ds.display(groupmem_name,"groupmem_name");
            _ds.display(unknow18_int,"unknow18_int");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(selfqq, true);
            _ds.displaySimple(add_qq, true);
            _ds.displaySimple(verifytype_int, true);
            _ds.displaySimple(unknow3_int, true);
            _ds.displaySimple(unknow4_int, true);
            _ds.displaySimple(msg_size, true);
            _ds.displaySimple(str_answer_msg, true);
            _ds.displaySimple(unknow7_int, true);
            _ds.displaySimple(unknow8_int, true);
            _ds.displaySimple(unknow10_int, true);
            _ds.displaySimple(unknow11_int, true);
            _ds.displaySimple(groupcode, true);
            _ds.displaySimple(unknow15_int, true);
            _ds.displaySimple(groupmem_name, true);
            _ds.displaySimple(unknow18_int, false);
            return _os;
        }
    public:
        tars::Int64 selfqq;
        tars::Int64 add_qq;
        tars::Char verifytype_int;
        tars::Char unknow3_int;
        tars::Int32 unknow4_int;
        tars::Char msg_size;
        std::string str_answer_msg;
        tars::Int32 unknow7_int;
        tars::Char unknow8_int;
        tars::Int32 unknow10_int;
        tars::Int32 unknow11_int;
        vector<tars::Char> groupcode;
        tars::Int32 unknow15_int;
        vector<tars::Char> groupmem_name;
        tars::Int32 unknow18_int;
    };
    inline bool operator==(const AddFriendReq&l, const AddFriendReq&r)
    {
        return l.selfqq == r.selfqq && l.add_qq == r.add_qq && l.verifytype_int == r.verifytype_int && l.unknow3_int == r.unknow3_int && l.unknow4_int == r.unknow4_int && l.msg_size == r.msg_size && l.str_answer_msg == r.str_answer_msg && l.unknow7_int == r.unknow7_int && l.unknow8_int == r.unknow8_int && l.unknow10_int == r.unknow10_int && l.unknow11_int == r.unknow11_int && l.groupcode == r.groupcode && l.unknow15_int == r.unknow15_int && l.groupmem_name == r.groupmem_name && l.unknow18_int == r.unknow18_int;
    }
    inline bool operator!=(const AddFriendReq&l, const AddFriendReq&r)
    {
        return !(l == r);
    }

    struct AddFriendRsp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "mqq_IMService_FriendListServiceServantObj.AddFriendRsp";
        }
        static string MD5()
        {
            return "6e2119de8c6c96e897452e0a1e8ed58f";
        }
        AddFriendRsp()
        :selfqq(0),add_qq(0),verifytype_int(0)
        {
        }
        void resetDefautlt()
        {
            selfqq = 0;
            add_qq = 0;
            verifytype_int = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(selfqq, 0);
            _os.write(add_qq, 1);
            _os.write(verifytype_int, 2);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(selfqq, 0, true);
            _is.read(add_qq, 1, true);
            _is.read(verifytype_int, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(selfqq,"selfqq");
            _ds.display(add_qq,"add_qq");
            _ds.display(verifytype_int,"verifytype_int");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(selfqq, true);
            _ds.displaySimple(add_qq, true);
            _ds.displaySimple(verifytype_int, false);
            return _os;
        }
    public:
        tars::Int64 selfqq;
        tars::Int64 add_qq;
        tars::Char verifytype_int;
    };
    inline bool operator==(const AddFriendRsp&l, const AddFriendRsp&r)
    {
        return l.selfqq == r.selfqq && l.add_qq == r.add_qq && l.verifytype_int == r.verifytype_int;
    }
    inline bool operator!=(const AddFriendRsp&l, const AddFriendRsp&r)
    {
        return !(l == r);
    }


}



#endif
